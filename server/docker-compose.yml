version: '3.8'

services:
  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-competition_platform}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  api_gateway:
    build:
      context: ./api_gateway
      dockerfile: ${ENV:-production}.Dockerfile
    ports:
      - "${API_GATEWAY_PORT:-8000}:8000"
    environment:
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL:-http://auth_service:8000}
      - ROOM_SERVICE_URL=${ROOM_SERVICE_URL:-http://room_service:8000}
      - COMPETITION_SERVICE_URL=${COMPETITION_SERVICE_URL:-http://competition_service:8000}
      - ACHIEVEMENT_SERVICE_URL=${ACHIEVEMENT_SERVICE_URL:-http://achievement_service:8000}
      - ENV=${ENV:-production}
    volumes:
      - ./api_gateway:/app
    depends_on:
      - auth_service
      - room_service
      - achievement_service
      - competition_service
    networks:
      - app_network
    restart: unless-stopped

  auth_service-base:
    build:
      context: ./auth_service
      dockerfile: base.Dockerfile
    image: auth_service-base
    command: echo "Base image built"

  auth_service:
    build:
      context: ./auth_service
      dockerfile: ${ENV:-production}.Dockerfile
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-competition_platform}
      - SECRET_KEY=${AUTH_SECRET_KEY:-09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS:-7}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI:-http://localhost:3000/auth/google/callback}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID:-}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET:-}
      - GITHUB_REDIRECT_URI=${GITHUB_REDIRECT_URI:-http://localhost:3000/auth/github/callback}
      - ENV=${ENV:-production}
    volumes:
      - ./auth_service:/app
      - ./common:/app/common
    depends_on:
      postgres:
        condition: service_healthy
      auth_service-base:
        condition: service_completed_successfully
    networks:
      - app_network
    restart: unless-stopped

  room_service-base:
    build:
      context: ./room_service
      dockerfile: base.Dockerfile
    image: room_service-base
    command: echo "Base image built"

  room_service:
    build:
      context: ./room_service
      dockerfile: ${ENV:-production}.Dockerfile
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-competition_platform}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL:-http://auth_service:8000}
      - ENV=${ENV:-production}
    volumes:
      - ./room_service:/app
      - ./common:/app/common
    depends_on:
      postgres:
        condition: service_healthy
      auth_service:
        condition: service_started
      room_service-base:
        condition: service_completed_successfully
    networks:
      - app_network
    restart: unless-stopped

  achievement_service-base:
    build:
      context: ./achievement_service
      dockerfile: base.Dockerfile
    image: achievement_service-base
    command: echo "Base image built"

  achievement_service:
    build:
      context: ./achievement_service
      dockerfile: ${ENV:-production}.Dockerfile
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-competition_platform}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL:-http://auth_service:8000}
      - ENV=${ENV:-production}
    volumes:
      - ./achievement_service:/app
      - ./common:/app/common
    depends_on:
      postgres:
        condition: service_healthy
      auth_service:
        condition: service_started
      achievement_service-base:
        condition: service_completed_successfully
    networks:
      - app_network
    restart: unless-stopped

  competition_service-base:
    build:
      context: ./competition_service
      dockerfile: base.Dockerfile
    image: competition_service-base
    command: echo "Base image built"

  competition_service:
    build:
      context: ./competition_service
      dockerfile: ${ENV:-production}.Dockerfile
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-competition_platform}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL:-http://auth_service:8000}
      - ENV=${ENV:-production}
    volumes:
      - ./competition_service:/app
      - ./common:/app/common
    depends_on:
      postgres:
        condition: service_healthy
      auth_service:
        condition: service_started
      competition_service-base:
        condition: service_completed_successfully
    networks:
      - app_network
    restart: unless-stopped

networks:
  app_network:

volumes:
  postgres_data:
