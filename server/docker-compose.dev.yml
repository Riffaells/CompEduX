version: '3.8'

services:
  # База данных PostgreSQL
  postgres:
    image: postgres:14-alpine
    container_name: postgres
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: ${POSTGRES_ADMIN_USER}
      POSTGRES_PASSWORD: ${POSTGRES_ADMIN_PASSWORD}
      POSTGRES_DB: postgres
      AUTH_DB_NAME: ${AUTH_DB_NAME}
      AUTH_DB_USER: ${AUTH_DB_USER}
      AUTH_DB_PASSWORD: ${AUTH_DB_PASSWORD}
      ROOM_DB_NAME: ${ROOM_DB_NAME}
      ROOM_DB_USER: ${ROOM_DB_USER}
      ROOM_DB_PASSWORD: ${ROOM_DB_PASSWORD}
      COMPETITION_DB_NAME: ${COMPETITION_DB_NAME}
      COMPETITION_DB_USER: ${COMPETITION_DB_USER}
      COMPETITION_DB_PASSWORD: ${COMPETITION_DB_PASSWORD}
      ACHIEVEMENT_DB_NAME: ${ACHIEVEMENT_DB_NAME}
      ACHIEVEMENT_DB_USER: ${ACHIEVEMENT_DB_USER}
      ACHIEVEMENT_DB_PASSWORD: ${ACHIEVEMENT_DB_PASSWORD}
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_ADMIN_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  # Сервис аутентификации в режиме разработки
  auth_service:
    build:
      context: ./auth_service
      dockerfile: Dockerfile
    container_name: auth_service
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
      POSTGRES_DB: ${AUTH_DB_NAME}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: ${POSTGRES_PORT}
      DEBUG: "true"
      AUTH_SECRET_KEY: ${AUTH_SECRET_KEY}
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${AUTH_SERVICE_PORT}:8000"
    volumes:
      - ./auth_service:/app
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL to be ready...' &&
        sleep 5 &&
        cd /app &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Сервис комнат в режиме разработки
  room_service:
    build:
      context: ./room_service
      dockerfile: Dockerfile
    container_name: room_service
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${ROOM_DB_USER}
      POSTGRES_PASSWORD: ${ROOM_DB_PASSWORD}
      POSTGRES_DB: ${ROOM_DB_NAME}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: ${POSTGRES_PORT}
      DEBUG: "true"
      AUTH_SECRET_KEY: ${AUTH_SECRET_KEY}
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${ROOM_SERVICE_PORT}:8000"
    volumes:
      - ./room_service:/app
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL to be ready...' &&
        sleep 5 &&
        cd /app &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # API Gateway в режиме разработки
  api_gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    container_name: api_gateway
    restart: always
    env_file:
      - .env
    environment:
      DEBUG: "true"
      AUTH_SECRET_KEY: ${AUTH_SECRET_KEY}
      AUTH_SERVICE_URL: ${AUTH_SERVICE_URL}
      ROOM_SERVICE_URL: ${ROOM_SERVICE_URL}
    depends_on:
      - auth_service
      - room_service
    ports:
      - "${API_GATEWAY_PORT}:8000"
    volumes:
      - ./api_gateway:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

volumes:
  postgres_data:
