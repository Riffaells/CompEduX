[versions]
app-name = "1.0.0"
app-version = "9"
app-project = "9"
app-package = "com.riffaells.compedux"

compileSdk = "35"
minSdk = "24"
targetSdk = "35"

jvm = "17"

kotlin = "2.1.10"
compose = "1.7.3"
agp = "8.7.3"
androidx-core = "1.15.0"
androidx-activityCompose = "1.10.1"
androidx-uiTest = "1.7.8"
multiplatform-settings = "1.3.0"
kodein = "7.25.0"

# Добавляем новые библиотеки
decompose = "3.3.0"
essenty = "2.5.0"
mviKotlin = "4.3.0"
kotlinx-datetime = "0.6.2"
ktor = "3.1.1"
napier = "2.7.1"
slf4j = "1.7.36"

android-compileSdk = "35"
android-minSdk = "24"
android-targetSdk = "35"
androidx-appcompat = "1.7.0"
androidx-constraintlayout = "2.2.0"
androidx-core-ktx = "1.15.0"
androidx-espresso-core = "3.6.1"
androidx-material = "1.12.0"
androidx-test-junit = "1.2.1"
coil = "3.0.4"
compose-plugin = "1.7.3"
filekit = "0.8.8"
junit = "4.13.2"
koin = "4.0.2"
koinComposeMultiplatform = "4.0.2"
lifecycle = "2.8.4"
navigationCompose = "2.8.0-alpha12"
kotlinx_serialization_json = "1.8.0"
coroutines = "1.10.1"
modulegraph = "0.10.1"
buildConfig = "5.5.1"
kermit = "2.0.5"
zoomimageComposeCoil = "1.1.0"
compose-hot-reload = "1.0.0-dev.34.1"
skiko = "0.8.18"
haze = "1.5.0"

kotlinx-browser = "0.8.0"


typesafeConventions = "0.4.1"
kotest = "5.6.2"
mockk = "1.13.7"
turbine = "1.0.0"

[libraries]
androidx-core = { module = "androidx.core:core-ktx", version.ref = "androidx-core" }
androidx-activityCompose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activityCompose" }
androidx-uitest-testManifest = { module = "androidx.compose.ui:ui-test-manifest", version.ref = "androidx-uiTest" }
androidx-uitest-junit4 = { module = "androidx.compose.ui:ui-test-junit4", version.ref = "androidx-uiTest" }
kotlin-gradlePlugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
kotlin-stdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlin" }
multiplatform-settings = { module = "com.russhwolf:multiplatform-settings-no-arg", version.ref = "multiplatform-settings" }
multiplatform-settings-coroutines = { module = "com.russhwolf:multiplatform-settings-coroutines", version.ref = "multiplatform-settings" }
multiplatform-settings-serialization = { module = "com.russhwolf:multiplatform-settings-serialization", version.ref = "multiplatform-settings" }
android-gradlePlugin = { module = "com.android.tools.build:gradle", version.ref = "agp" }
compose-gradlePlugin = { module = "org.jetbrains.compose:compose-gradle-plugin", version.ref = "compose" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx_serialization_json" }

#kotlinx-browser = { module = "org.jetbrains.kotlinx:kotlinx-browser", version.ref = "kotlinx-browser" }

coroutines = { group = "org.jetbrains.kotlinx", name = "kotlinx-coroutines-core", version.ref = "coroutines" }
coroutines-android = { group = "org.jetbrains.kotlinx", name = "kotlinx-coroutines-android", version.ref = "coroutines" }

kodein = { module = "org.kodein.di:kodein-di", version.ref = "kodein" }
kodein-compose = { module = "org.kodein.di:kodein-di-framework-compose", version.ref = "kodein" }

# Decompose и Essenty
decompose = { module = "com.arkivanov.decompose:decompose", version.ref = "decompose" }
decompose-compose = { module = "com.arkivanov.decompose:extensions-compose", version.ref = "decompose" }
essenty-lifecycle = { module = "com.arkivanov.essenty:lifecycle", version.ref = "essenty" }
essenty-lifecycle-coroutines = { module = "com.arkivanov.essenty:lifecycle-coroutines", version.ref = "essenty" }
essenty-statekeeper = { module = "com.arkivanov.essenty:state-keeper", version.ref = "essenty" }
essenty-instancekeeper = { module = "com.arkivanov.essenty:instance-keeper", version.ref = "essenty" }
essenty-backhandler = { module = "com.arkivanov.essenty:back-handler", version.ref = "essenty" }

# MVIKotlin
mvikotlin = { module = "com.arkivanov.mvikotlin:mvikotlin", version.ref = "mviKotlin" }
mvikotlin-main = { module = "com.arkivanov.mvikotlin:mvikotlin-main", version.ref = "mviKotlin" }
mvikotlin-logging = { module = "com.arkivanov.mvikotlin:mvikotlin-logging", version.ref = "mviKotlin" }
mvikotlin-timetravel = { module = "com.arkivanov.mvikotlin:mvikotlin-timetravel", version.ref = "mviKotlin" }
mvikotlin-extensions-coroutines = { module = "com.arkivanov.mvikotlin:mvikotlin-extensions-coroutines", version.ref = "mviKotlin" }

# KotlinX DateTime
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinx-datetime" }

# Ktor
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-serialization-kotlinx-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-client-auth = { module = "io.ktor:ktor-client-auth", version.ref = "ktor" }
# Платформо-специфичные движки Ktor
ktor-client-android = { module = "io.ktor:ktor-client-android", version.ref = "ktor" }
ktor-client-darwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
ktor-client-js = { module = "io.ktor:ktor-client-js", version.ref = "ktor" }
ktor-client-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }

# Логирование
napier = { module = "io.github.aakira:napier", version.ref = "napier" }
slf4j-api = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
slf4j-android = { module = "org.slf4j:slf4j-android", version.ref = "slf4j" }
slf4j-simple = { module = "org.slf4j:slf4j-simple", version.ref = "slf4j" }

skiko = { module = "org.jetbrains.skiko:skiko", version.ref = "skiko" }
haze = { group = "dev.chrisbanes.haze",  name="haze",version.ref = "haze" }

# Тестовые библиотеки
kotest-assertions = { module = "io.kotest:kotest-assertions-core", version.ref = "kotest" }
kotest-framework = { module = "io.kotest:kotest-framework-engine", version.ref = "kotest" }
kotest-property = { module = "io.kotest:kotest-property", version.ref = "kotest" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }
turbine = { module = "app.cash.turbine:turbine", version.ref = "turbine" }
ktor-client-mock = { module = "io.ktor:ktor-client-mock", version.ref = "ktor" }

[plugins]

kmultiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
compose-compiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
kcompose = { id = "org.jetbrains.compose", version.ref = "compose" }
android-application = { id = "com.android.application", version.ref = "agp" }
android-library = { id = "com.android.library", version.ref = "agp" }

kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
kotlin-parcelize = { id = "org.jetbrains.kotlin.plugin.parcelize", version.ref = "kotlin" }
modulegraph = { id = "dev.iurysouza.modulegraph", version.ref = "modulegraph" }
buildConfig = { id = "com.github.gmazzo.buildconfig", version.ref = "buildConfig" }
composeHotReload = { id = "org.jetbrains.compose-hot-reload", version.ref = "compose-hot-reload" }
typesafe-conventions = { id = "dev.panuszewski.typesafe-conventions", version.ref = "typesafeConventions" }

kotlinJvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }

compedux-multiplatform = { id = "com.riffaells.compedux.multiplatform"  }
compedux-multiplatform-compose = { id = "com.riffaells.compedux.multiplatform.compose" }
compedux-multiplatform-library = { id = "com.riffaells.compedux.multiplatform.library" }
compedux-settings = { id = "com.riffaells.compedux.multiplatform.settings" }
compedux-kconfig = { id = "com.riffaells.compedux.multiplatform.config" }
compedux-networking = { id = "com.riffaells.compedux.multiplatform.networking" }
compedux-decompose = { id = "com.riffaells.compedux.multiplatform.decompose" }
