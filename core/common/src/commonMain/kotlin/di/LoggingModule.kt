package di

import io.github.aakira.napier.Antilog
import io.github.aakira.napier.DebugAntilog
import io.github.aakira.napier.LogLevel
import io.github.aakira.napier.Napier
import kotlinx.datetime.Clock
import kotlinx.datetime.TimeZone
import kotlinx.datetime.toLocalDateTime
import org.kodein.di.DI
import org.kodein.di.bind
import org.kodein.di.instance
import org.kodein.di.singleton

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
interface Logger {
    fun d(message: String, throwable: Throwable? = null, tag: String? = null)
    fun i(message: String, throwable: Throwable? = null, tag: String? = null)
    fun w(message: String, throwable: Throwable? = null, tag: String? = null)
    fun e(message: String, throwable: Throwable? = null, tag: String? = null)
    fun v(message: String, throwable: Throwable? = null, tag: String? = null)
}

/**
 * –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Antilog, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –ª–æ–≥–∏ –≤ –±–æ–ª–µ–µ —á–∏—Å—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 */
class CustomAntilog : Antilog() {
    override fun performLog(
        priority: LogLevel,
        tag: String?,
        throwable: Throwable?,
        message: String?
    ) {
        val tagString = if (tag != null) "[$tag]" else ""

        // –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        val emoji = when (priority) {
            LogLevel.VERBOSE -> "üü£" // —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –∫—Ä—É–≥
            LogLevel.DEBUG -> "üîµ" // —Å–∏–Ω–∏–π –∫—Ä—É–≥
            LogLevel.INFO -> "üü¢" // –∑–µ–ª–µ–Ω—ã–π –∫—Ä—É–≥
            LogLevel.WARNING -> "üü°" // –∂–µ–ª—Ç—ã–π –∫—Ä—É–≥
            LogLevel.ERROR -> "üî¥" // –∫—Ä–∞—Å–Ω—ã–π –∫—Ä—É–≥
            LogLevel.ASSERT -> "‚ö†Ô∏è" // –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        }

        val priorityChar = when (priority) {
            LogLevel.VERBOSE -> "V"
            LogLevel.DEBUG -> "D"
            LogLevel.INFO -> "I"
            LogLevel.WARNING -> "W"
            LogLevel.ERROR -> "E"
            LogLevel.ASSERT -> "A"
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        val now = Clock.System.now()
        val localDateTime = now.toLocalDateTime(TimeZone.currentSystemDefault())
        val timeStr = String.format("%02d:%02d:%02d.%03d",
            localDateTime.hour, localDateTime.minute, localDateTime.second, now.toEpochMilliseconds() % 1000)

        val output = buildString {
            append("$emoji[$timeStr][$priorityChar] ")
            if (tag != null) {
                append("$tagString ")
            }
            append(message ?: "")

            if (throwable != null) {
                append("\n")
                append(throwable.stackTraceToString())
            }
        }

        println(output)
    }
}

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Napier —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ—Ç–ª–∏—á–∏–º–æ—Å—Ç–∏
 */
class NapierLogger(antilog: Antilog) : Logger {
    init {
        Napier.base(antilog)
    }

    override fun d(message: String, throwable: Throwable?, tag: String?) {
        Napier.d(message, throwable, tag)
    }

    override fun i(message: String, throwable: Throwable?, tag: String?) {
        Napier.i(message, throwable, tag)
    }

    override fun w(message: String, throwable: Throwable?, tag: String?) {
        Napier.w(message, throwable, tag)
    }

    override fun e(message: String, throwable: Throwable?, tag: String?) {
        Napier.e(message, throwable, tag)
    }

    override fun v(message: String, throwable: Throwable?, tag: String?) {
        Napier.v(message, throwable, tag)
    }
}

/**
 * –ú–æ–¥—É–ª—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è DI
 */
val loggingModule = DI.Module("loggingModule") {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±—ç–∫–µ–Ω–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    bind<Antilog>() with singleton { CustomAntilog() }

    // –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
    bind<Logger>() with singleton { NapierLogger(instance()) }
}
