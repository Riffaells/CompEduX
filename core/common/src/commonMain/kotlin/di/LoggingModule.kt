package di

import io.github.aakira.napier.Antilog
import io.github.aakira.napier.DebugAntilog
import io.github.aakira.napier.LogLevel
import io.github.aakira.napier.Napier
import kotlinx.datetime.Clock
import kotlinx.datetime.TimeZone
import kotlinx.datetime.toLocalDateTime
import org.kodein.di.DI
import org.kodein.di.bind
import org.kodein.di.instance
import org.kodein.di.singleton

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
interface Logger {
    fun d(message: String, throwable: Throwable? = null, tag: String? = null)
    fun i(message: String, throwable: Throwable? = null, tag: String? = null)
    fun w(message: String, throwable: Throwable? = null, tag: String? = null)
    fun e(message: String, throwable: Throwable? = null, tag: String? = null)
    fun v(message: String, throwable: Throwable? = null, tag: String? = null)
}

/**
 * –¶–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏ ANSI
 */
object ConsoleColors {
    const val RESET = "\u001B[0m"
    const val BLACK = "\u001B[30m"
    const val RED = "\u001B[31m"
    const val GREEN = "\u001B[32m"
    const val YELLOW = "\u001B[33m"
    const val BLUE = "\u001B[34m"
    const val PURPLE = "\u001B[35m"
    const val CYAN = "\u001B[36m"
    const val WHITE = "\u001B[37m"

    // –Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞
    const val BRIGHT_RED = "\u001B[91m"
    const val BRIGHT_GREEN = "\u001B[92m"
    const val BRIGHT_YELLOW = "\u001B[93m"
    const val BRIGHT_BLUE = "\u001B[94m"
    const val BRIGHT_PURPLE = "\u001B[95m"
    const val BRIGHT_CYAN = "\u001B[96m"
    const val BRIGHT_WHITE = "\u001B[97m"

    // –§–æ–Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞
    const val BG_RED = "\u001B[41m"
    const val BG_GREEN = "\u001B[42m"
    const val BG_YELLOW = "\u001B[43m"
    const val BG_BLUE = "\u001B[44m"
    const val BG_PURPLE = "\u001B[45m"
    const val BG_CYAN = "\u001B[46m"
    const val BG_WHITE = "\u001B[47m"

    // –°—Ç–∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
    const val BOLD = "\u001B[1m"
    const val UNDERLINE = "\u001B[4m"
    const val ITALIC = "\u001B[3m"
}

/**
 * –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Antilog, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –ª–æ–≥–∏ –≤ –±–æ–ª–µ–µ –≤–∏–∑—É–∞–ª—å–Ω–æ —Ä–∞–∑–ª–∏—á–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å —Ü–≤–µ—Ç–∞–º–∏
 */
class CustomAntilog : Antilog() {
    override fun performLog(
        priority: LogLevel,
        tag: String?,
        throwable: Throwable?,
        message: String?
    ) {
        val tagString = if (tag != null) "[$tag]" else ""

        // –¶–≤–µ—Ç–∞ –∏ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        val (color, emoji) = when (priority) {
            LogLevel.VERBOSE -> Pair(ConsoleColors.PURPLE, "üü£") // —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
            LogLevel.DEBUG -> Pair(ConsoleColors.BLUE, "üîµ") // —Å–∏–Ω–∏–π
            LogLevel.INFO -> Pair(ConsoleColors.GREEN, "üü¢") // –∑–µ–ª–µ–Ω—ã–π
            LogLevel.WARNING -> Pair(ConsoleColors.YELLOW, "üü°") // –∂–µ–ª—Ç—ã–π
            LogLevel.ERROR -> Pair(ConsoleColors.BRIGHT_RED, "üî¥") // –∫—Ä–∞—Å–Ω—ã–π
            LogLevel.ASSERT -> Pair(ConsoleColors.BG_RED + ConsoleColors.WHITE, "‚ö†Ô∏è") // –∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω —Å –±–µ–ª—ã–º —Ç–µ–∫—Å—Ç–æ–º
        }

        val priorityChar = when (priority) {
            LogLevel.VERBOSE -> "V"
            LogLevel.DEBUG -> "D"
            LogLevel.INFO -> "I"
            LogLevel.WARNING -> "W"
            LogLevel.ERROR -> "E"
            LogLevel.ASSERT -> "A"
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        val now = Clock.System.now()
        val localDateTime = now.toLocalDateTime(TimeZone.currentSystemDefault())
        val timeStr = String.format("%02d:%02d:%02d.%03d",
            localDateTime.hour, localDateTime.minute, localDateTime.second, now.toEpochMilliseconds() % 1000)

        val output = buildString {
            append("$color$emoji[$timeStr][$priorityChar]")
            if (tag != null) {
                append(" $tagString")
            }
            append(" $message")

            if (throwable != null) {
                append("\n")
                append(throwable.stackTraceToString())
            }

            append(ConsoleColors.RESET) // –°–±—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        }

        println(output)
    }
}

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Napier —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ—Ç–ª–∏—á–∏–º–æ—Å—Ç–∏
 */
class NapierLogger(antilog: Antilog) : Logger {
    init {
        Napier.base(antilog)
    }

    override fun d(message: String, throwable: Throwable?, tag: String?) {
        Napier.d(message, throwable, tag)
    }

    override fun i(message: String, throwable: Throwable?, tag: String?) {
        Napier.i(message, throwable, tag)
    }

    override fun w(message: String, throwable: Throwable?, tag: String?) {
        Napier.w(message, throwable, tag)
    }

    override fun e(message: String, throwable: Throwable?, tag: String?) {
        Napier.e(message, throwable, tag)
    }

    override fun v(message: String, throwable: Throwable?, tag: String?) {
        Napier.v(message, throwable, tag)
    }
}

/**
 * –ú–æ–¥—É–ª—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è DI
 */
val loggingModule = DI.Module("loggingModule") {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±—ç–∫–µ–Ω–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    bind<Antilog>() with singleton { CustomAntilog() }

    // –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
    bind<Logger>() with singleton { NapierLogger(instance()) }
}
