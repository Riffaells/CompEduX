package logging

import io.github.aakira.napier.Antilog
import io.github.aakira.napier.LogLevel
import kotlinx.datetime.Clock
import kotlinx.datetime.TimeZone
import kotlinx.datetime.toLocalDateTime

/**
 * Custom Antilog implementation with colored console output
 */
class CompEduXAntilog : Antilog() {

    // –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    private val recentLogs = mutableListOf<String>()
    private val maxCacheSize = 50

    override fun performLog(
        priority: LogLevel,
        tag: String?,
        throwable: Throwable?,
        message: String?
    ) {
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –ª–æ–≥–∞
        val logId = "${priority.name}|${tag ?: ""}|${message?.hashCode() ?: 0}"

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —Ç–∞–∫–æ–≥–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–æ
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º synchronized –±–ª–æ–∫ –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        synchronized(recentLogs) {
            if (recentLogs.contains(logId)) {
                // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ –ª–æ–≥ —É–∂–µ –±—ã–ª - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                return
            }

            // –î–æ–±–∞–≤–ª—è–µ–º ID –≤ –∫—ç—à –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            recentLogs.add(logId)
            if (recentLogs.size > maxCacheSize) {
                recentLogs.removeAt(0)
            }
        }

        // Get log level color
        val color = when (priority) {
            LogLevel.VERBOSE -> ConsoleColors.CYAN
            LogLevel.DEBUG -> ConsoleColors.BLUE
            LogLevel.INFO -> ConsoleColors.GREEN
            LogLevel.WARNING -> ConsoleColors.YELLOW
            LogLevel.ERROR -> ConsoleColors.RED
            LogLevel.ASSERT -> ConsoleColors.PURPLE
        }

        // Emoji for better visual distinction
        val emoji = when (priority) {
            LogLevel.VERBOSE -> "üí¨"
            LogLevel.DEBUG -> "üîç"
            LogLevel.INFO -> "‚ÑπÔ∏è"
            LogLevel.WARNING -> "‚ö†Ô∏è"
            LogLevel.ERROR -> "‚ùå"
            LogLevel.ASSERT -> "üö®"
        }

        // Add tag if present
        val tagString = tag?.let { "[$it]" } ?: ""

        // Priority letter for short display
        val priorityChar = when (priority) {
            LogLevel.VERBOSE -> "V"
            LogLevel.DEBUG -> "D"
            LogLevel.INFO -> "I"
            LogLevel.WARNING -> "W"
            LogLevel.ERROR -> "E"
            LogLevel.ASSERT -> "A"
        }

        // Get current time
        val now = Clock.System.now()
        val localDateTime = now.toLocalDateTime(TimeZone.currentSystemDefault())
        // Format time without String.format (not available on all platforms)
        val hour = localDateTime.hour.toString().padStart(2, '0')
        val minute = localDateTime.minute.toString().padStart(2, '0')
        val second = localDateTime.second.toString().padStart(2, '0')
        val millis = (now.toEpochMilliseconds() % 1000).toString().padStart(3, '0')
        val timeStr = "$hour:$minute:$second.$millis"

        val output = buildString {
            append("$color$emoji[$timeStr][$priorityChar]")
            if (tag != null) {
                append(" $tagString")
            }
            append(" $message")

            if (throwable != null) {
                append("\n")
                append(throwable.stackTraceToString())
            }

            append(ConsoleColors.RESET) // Reset formatting
        }

        // Just use println for all platforms
        println(output)
    }
}
